
chakram@Chakram MINGW64 ~/Desktop/kubernetes/GovTech_Test/Terraform-frontend-app-deploy
$ ls -lrt
total 4
-rw-r--r-- 1 chakram 197121 3112 Mar 12 20:31 main.tf

chakram@Chakram MINGW64 ~/Desktop/kubernetes/GovTech_Test/Terraform-frontend-app-deploy
$ cat main.tf
provider "aws" {
  region = "ap-southeast-1"
}

resource "aws_security_group" "govtech_sg_1" {
  name_prefix = "govtech_sg_1"
  vpc_id = aws_vpc.govtech_vpc.id
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_eip" "govtech_eip" {
  vpc = true
}

resource "aws_subnet" "govtech_subnet_nginx" {
  cidr_block = "10.0.2.0/24"
  availability_zone = "ap-southeast-1a"
  vpc_id = aws_vpc.govtech_vpc.id
}

resource "aws_subnet" "govtech_subnet_nginx2" {
  cidr_block = "10.0.3.0/24"
  availability_zone = "ap-southeast-1b"
  vpc_id = aws_vpc.govtech_vpc.id
}

resource "aws_vpc" "govtech_vpc" {
  cidr_block = "10.0.0.0/16"
  enable_dns_support = true
  enable_dns_hostnames = true
  tags = {
    Name = "govtech_vpc"
  }
}

resource "aws_internet_gateway" "govtech_igw" {
  vpc_id = aws_vpc.govtech_vpc.id
  tags = {
    Name = "govtech_igw"
  }
}

resource "aws_route_table" "govtech_public_route_table" {
  vpc_id = aws_vpc.govtech_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.govtech_igw.id
  }

  tags = {
    Name = "govtech_public_route_table"
  }
}

resource "aws_route_table_association" "govtech_public_route_table_association" {
  subnet_id = aws_subnet.govtech_subnet_nginx.id
  route_table_id = aws_route_table.govtech_public_route_table.id
}

resource "aws_launch_configuration" "govtech_lc_nginx" {
  name_prefix   = "govtech_lc_nginx"
  image_id      = "ami-082b1f4237bd816a1"
  instance_type = "t2.micro"
  security_groups = [aws_security_group.govtech_sg_1.id]
  user_data = <<-EOF
              #!/bin/bash
              sudo apt-get update
              sudo apt-get upgrade
              sudo apt-get -y install nginx
              systemctl start nginx
              aws s3 cp s3://govtech-webpages/incremental-decremental-webpage.html /usr/share/nginx/html --recursive
              EOF
}

resource "aws_alb" "govtechalb" {
  name            = "govtechalb"
  security_groups = [aws_security_group.govtech_sg_1.id]


  load_balancer_type = "application"

  subnet_mapping {
    subnet_id = aws_subnet.govtech_subnet_nginx.id
  }
  subnet_mapping {
    subnet_id = aws_subnet.govtech_subnet_nginx2.id
  }
}

resource "aws_lb_listener" "govtech_listnr_lb" {
  load_balancer_arn = aws_alb.govtechalb.arn
  port              = "80"
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_alb_target_group.gt-tg.arn
  }
}

resource "aws_alb_target_group" "gt-tg" {
  name_prefix     = "gt-tg"
  port            = 80
  protocol        = "HTTP"
  target_type     = "instance"
  vpc_id          = aws_vpc.govtech_vpc.id

  health_check {
    path = "/"
  }
}

resource "aws_autoscaling_group" "govtech-autoscl-grp" {
  name_prefix            = "govtech-autoscl-grp"
  min_size               = 3
  max_size               = 3
  launch_configuration  = aws_launch_configuration.govtech_lc_nginx.name
  vpc_zone_identifier    = ["${aws_subnet.govtech_subnet_nginx.id}"]
  target_group_arns      = [aws_alb_target_group.gt-tg.arn]
}



chakram@Chakram MINGW64 ~/Desktop/kubernetes/GovTech_Test/Terraform-frontend-app-deploy
$ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v4.58.0...
- Installed hashicorp/aws v4.58.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

chakram@Chakram MINGW64 ~/Desktop/kubernetes/GovTech_Test/Terraform-frontend-app-deploy
$ terraform plan

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_alb.govtechalb will be created
  + resource "aws_alb" "govtechalb" {
      + arn                        = (known after apply)
      + arn_suffix                 = (known after apply)
      + desync_mitigation_mode     = "defensive"
      + dns_name                   = (known after apply)
      + drop_invalid_header_fields = false
      + enable_deletion_protection = false
      + enable_http2               = true
      + enable_waf_fail_open       = false
      + id                         = (known after apply)
      + idle_timeout               = 60
      + internal                   = (known after apply)
      + ip_address_type            = (known after apply)
      + load_balancer_type         = "application"
      + name                       = "govtechalb"
      + preserve_host_header       = false
      + security_groups            = (known after apply)
      + subnets                    = (known after apply)
      + tags_all                   = (known after apply)
      + vpc_id                     = (known after apply)
      + zone_id                    = (known after apply)

      + subnet_mapping {
          + outpost_id = (known after apply)
          + subnet_id  = (known after apply)
        }
      + subnet_mapping {
          + outpost_id = (known after apply)
          + subnet_id  = (known after apply)
        }
    }

  # aws_alb_target_group.gt-tg will be created
  + resource "aws_alb_target_group" "gt-tg" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = false
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancing_algorithm_type      = (known after apply)
      + name                               = (known after apply)
      + name_prefix                        = "gt-tg"
      + port                               = 80
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags_all                           = (known after apply)
      + target_type                        = "instance"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 3
          + interval            = 30
          + matcher             = (known after apply)
          + path                = "/"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = (known after apply)
          + unhealthy_threshold = 3
        }

      + stickiness {
          + cookie_duration = (known after apply)
          + cookie_name     = (known after apply)
          + enabled         = (known after apply)
          + type            = (known after apply)
        }

      + target_failover {
          + on_deregistration = (known after apply)
          + on_unhealthy      = (known after apply)
        }
    }

  # aws_autoscaling_group.govtech-autoscl-grp will be created
  + resource "aws_autoscaling_group" "govtech-autoscl-grp" {
      + arn                       = (known after apply)
      + availability_zones        = (known after apply)
      + default_cooldown          = (known after apply)
      + desired_capacity          = (known after apply)
      + force_delete              = false
      + force_delete_warm_pool    = false
      + health_check_grace_period = 300
      + health_check_type         = (known after apply)
      + id                        = (known after apply)
      + launch_configuration      = (known after apply)
      + max_size                  = 3
      + metrics_granularity       = "1Minute"
      + min_size                  = 3
      + name                      = (known after apply)
      + name_prefix               = "govtech-autoscl-grp"
      + protect_from_scale_in     = false
      + service_linked_role_arn   = (known after apply)
      + target_group_arns         = (known after apply)
      + vpc_zone_identifier       = (known after apply)
      + wait_for_capacity_timeout = "10m"
    }

  # aws_eip.govtech_eip will be created
  + resource "aws_eip" "govtech_eip" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags_all             = (known after apply)
      + vpc                  = true
    }

  # aws_internet_gateway.govtech_igw will be created
  + resource "aws_internet_gateway" "govtech_igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "govtech_igw"
        }
      + tags_all = {
          + "Name" = "govtech_igw"
        }
      + vpc_id   = (known after apply)
    }

  # aws_launch_configuration.govtech_lc_nginx will be created
  + resource "aws_launch_configuration" "govtech_lc_nginx" {
      + arn                         = (known after apply)
      + associate_public_ip_address = (known after apply)
      + ebs_optimized               = (known after apply)
      + enable_monitoring           = true
      + id                          = (known after apply)
      + image_id                    = "ami-082b1f4237bd816a1"
      + instance_type               = "t2.micro"
      + key_name                    = (known after apply)
      + name                        = (known after apply)
      + name_prefix                 = "govtech_lc_nginx"
      + security_groups             = (known after apply)
      + user_data                   = "e38b7365444101c62f02f43faee94af211222bb7"

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + no_device             = (known after apply)
          + snapshot_id           = (known after apply)
          + throughput            = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + throughput            = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_lb_listener.govtech_listnr_lb will be created
  + resource "aws_lb_listener" "govtech_listnr_lb" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + load_balancer_arn = (known after apply)
      + port              = 80
      + protocol          = "HTTP"
      + ssl_policy        = (known after apply)
      + tags_all          = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }
    }

  # aws_route_table.govtech_public_route_table will be created
  + resource "aws_route_table" "govtech_public_route_table" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + core_network_arn           = ""
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Name" = "govtech_public_route_table"
        }
      + tags_all         = {
          + "Name" = "govtech_public_route_table"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.govtech_public_route_table_association will be created
  + resource "aws_route_table_association" "govtech_public_route_table_association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.govtech_sg_1 will be created
  + resource "aws_security_group" "govtech_sg_1" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = (known after apply)
      + name_prefix            = "govtech_sg_1"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.govtech_subnet_nginx will be created
  + resource "aws_subnet" "govtech_subnet_nginx" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-southeast-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags_all                                       = (known after apply)
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.govtech_subnet_nginx2 will be created
  + resource "aws_subnet" "govtech_subnet_nginx2" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-southeast-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.3.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags_all                                       = (known after apply)
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.govtech_vpc will be created
  + resource "aws_vpc" "govtech_vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_classiclink                   = (known after apply)
      + enable_classiclink_dns_support       = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "govtech_vpc"
        }
      + tags_all                             = {
          + "Name" = "govtech_vpc"
        }
    }

Plan: 13 to add, 0 to change, 0 to destroy.

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.

chakram@Chakram MINGW64 ~/Desktop/kubernetes/GovTech_Test/Terraform-frontend-app-deploy
$ terraform apply

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_alb.govtechalb will be created
  + resource "aws_alb" "govtechalb" {
      + arn                        = (known after apply)
      + arn_suffix                 = (known after apply)
      + desync_mitigation_mode     = "defensive"
      + dns_name                   = (known after apply)
      + drop_invalid_header_fields = false
      + enable_deletion_protection = false
      + enable_http2               = true
      + enable_waf_fail_open       = false
      + id                         = (known after apply)
      + idle_timeout               = 60
      + internal                   = (known after apply)
      + ip_address_type            = (known after apply)
      + load_balancer_type         = "application"
      + name                       = "govtechalb"
      + preserve_host_header       = false
      + security_groups            = (known after apply)
      + subnets                    = (known after apply)
      + tags_all                   = (known after apply)
      + vpc_id                     = (known after apply)
      + zone_id                    = (known after apply)

      + subnet_mapping {
          + outpost_id = (known after apply)
          + subnet_id  = (known after apply)
        }
      + subnet_mapping {
          + outpost_id = (known after apply)
          + subnet_id  = (known after apply)
        }
    }

  # aws_alb_target_group.gt-tg will be created
  + resource "aws_alb_target_group" "gt-tg" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = false
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancing_algorithm_type      = (known after apply)
      + name                               = (known after apply)
      + name_prefix                        = "gt-tg"
      + port                               = 80
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags_all                           = (known after apply)
      + target_type                        = "instance"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 3
          + interval            = 30
          + matcher             = (known after apply)
          + path                = "/"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = (known after apply)
          + unhealthy_threshold = 3
        }

      + stickiness {
          + cookie_duration = (known after apply)
          + cookie_name     = (known after apply)
          + enabled         = (known after apply)
          + type            = (known after apply)
        }

      + target_failover {
          + on_deregistration = (known after apply)
          + on_unhealthy      = (known after apply)
        }
    }

  # aws_autoscaling_group.govtech-autoscl-grp will be created
  + resource "aws_autoscaling_group" "govtech-autoscl-grp" {
      + arn                       = (known after apply)
      + availability_zones        = (known after apply)
      + default_cooldown          = (known after apply)
      + desired_capacity          = (known after apply)
      + force_delete              = false
      + force_delete_warm_pool    = false
      + health_check_grace_period = 300
      + health_check_type         = (known after apply)
      + id                        = (known after apply)
      + launch_configuration      = (known after apply)
      + max_size                  = 3
      + metrics_granularity       = "1Minute"
      + min_size                  = 3
      + name                      = (known after apply)
      + name_prefix               = "govtech-autoscl-grp"
      + protect_from_scale_in     = false
      + service_linked_role_arn   = (known after apply)
      + target_group_arns         = (known after apply)
      + vpc_zone_identifier       = (known after apply)
      + wait_for_capacity_timeout = "10m"
    }

  # aws_eip.govtech_eip will be created
  + resource "aws_eip" "govtech_eip" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags_all             = (known after apply)
      + vpc                  = true
    }

  # aws_internet_gateway.govtech_igw will be created
  + resource "aws_internet_gateway" "govtech_igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "govtech_igw"
        }
      + tags_all = {
          + "Name" = "govtech_igw"
        }
      + vpc_id   = (known after apply)
    }

  # aws_launch_configuration.govtech_lc_nginx will be created
  + resource "aws_launch_configuration" "govtech_lc_nginx" {
      + arn                         = (known after apply)
      + associate_public_ip_address = (known after apply)
      + ebs_optimized               = (known after apply)
      + enable_monitoring           = true
      + id                          = (known after apply)
      + image_id                    = "ami-082b1f4237bd816a1"
      + instance_type               = "t2.micro"
      + key_name                    = (known after apply)
      + name                        = (known after apply)
      + name_prefix                 = "govtech_lc_nginx"
      + security_groups             = (known after apply)
      + user_data                   = "e38b7365444101c62f02f43faee94af211222bb7"

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + no_device             = (known after apply)
          + snapshot_id           = (known after apply)
          + throughput            = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + throughput            = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_lb_listener.govtech_listnr_lb will be created
  + resource "aws_lb_listener" "govtech_listnr_lb" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + load_balancer_arn = (known after apply)
      + port              = 80
      + protocol          = "HTTP"
      + ssl_policy        = (known after apply)
      + tags_all          = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }
    }

  # aws_route_table.govtech_public_route_table will be created
  + resource "aws_route_table" "govtech_public_route_table" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + core_network_arn           = ""
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Name" = "govtech_public_route_table"
        }
      + tags_all         = {
          + "Name" = "govtech_public_route_table"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.govtech_public_route_table_association will be created
  + resource "aws_route_table_association" "govtech_public_route_table_association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.govtech_sg_1 will be created
  + resource "aws_security_group" "govtech_sg_1" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = (known after apply)
      + name_prefix            = "govtech_sg_1"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.govtech_subnet_nginx will be created
  + resource "aws_subnet" "govtech_subnet_nginx" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-southeast-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags_all                                       = (known after apply)
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.govtech_subnet_nginx2 will be created
  + resource "aws_subnet" "govtech_subnet_nginx2" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-southeast-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.3.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags_all                                       = (known after apply)
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.govtech_vpc will be created
  + resource "aws_vpc" "govtech_vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_classiclink                   = (known after apply)
      + enable_classiclink_dns_support       = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "govtech_vpc"
        }
      + tags_all                             = {
          + "Name" = "govtech_vpc"
        }
    }

Plan: 13 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_eip.govtech_eip: Creating...
aws_vpc.govtech_vpc: Creating...
aws_eip.govtech_eip: Creation complete after 1s [id=eipalloc-053d491d586a879b8]
aws_vpc.govtech_vpc: Still creating... [10s elapsed]
aws_vpc.govtech_vpc: Creation complete after 12s [id=vpc-0197e9ca1590765e1]
aws_internet_gateway.govtech_igw: Creating...
aws_subnet.govtech_subnet_nginx: Creating...
aws_subnet.govtech_subnet_nginx2: Creating...
aws_alb_target_group.gt-tg: Creating...
aws_security_group.govtech_sg_1: Creating...
aws_subnet.govtech_subnet_nginx: Creation complete after 1s [id=subnet-00952ef9b2551f26e]
aws_subnet.govtech_subnet_nginx2: Creation complete after 1s [id=subnet-013833ac44e82e306]
aws_alb_target_group.gt-tg: Creation complete after 1s [id=arn:aws:elasticloadbalancing:ap-southeast-1:652961893649:targetgroup/gt-tg20230312232945458200000001/05e3d67528481dd2]
aws_security_group.govtech_sg_1: Creation complete after 2s [id=sg-056a8fca6480cebb0]
aws_launch_configuration.govtech_lc_nginx: Creating...
aws_alb.govtechalb: Creating...
aws_internet_gateway.govtech_igw: Creation complete after 2s [id=igw-0cc58b1cdd0569e89]
aws_route_table.govtech_public_route_table: Creating...
aws_launch_configuration.govtech_lc_nginx: Creation complete after 1s [id=govtech_lc_nginx20230312232947405200000003]
aws_autoscaling_group.govtech-autoscl-grp: Creating...
aws_route_table.govtech_public_route_table: Creation complete after 1s [id=rtb-0a5e028f4d7e598a9]
aws_route_table_association.govtech_public_route_table_association: Creating...
aws_route_table_association.govtech_public_route_table_association: Creation complete after 0s [id=rtbassoc-00294874cb688a1f5]
aws_alb.govtechalb: Still creating... [10s elapsed]
aws_autoscaling_group.govtech-autoscl-grp: Still creating... [10s elapsed]
aws_alb.govtechalb: Still creating... [20s elapsed]
aws_autoscaling_group.govtech-autoscl-grp: Still creating... [20s elapsed]
aws_alb.govtechalb: Still creating... [30s elapsed]
aws_autoscaling_group.govtech-autoscl-grp: Still creating... [30s elapsed]
aws_alb.govtechalb: Still creating... [40s elapsed]
aws_autoscaling_group.govtech-autoscl-grp: Still creating... [40s elapsed]
aws_autoscaling_group.govtech-autoscl-grp: Creation complete after 47s [id=govtech-autoscl-grp20230312232948127400000004]
aws_alb.govtechalb: Still creating... [50s elapsed]
aws_alb.govtechalb: Still creating... [1m0s elapsed]
aws_alb.govtechalb: Still creating... [1m10s elapsed]
aws_alb.govtechalb: Still creating... [1m20s elapsed]
aws_alb.govtechalb: Still creating... [1m30s elapsed]
aws_alb.govtechalb: Still creating... [1m40s elapsed]
aws_alb.govtechalb: Still creating... [1m51s elapsed]
aws_alb.govtechalb: Still creating... [2m1s elapsed]
aws_alb.govtechalb: Creation complete after 2m3s [id=arn:aws:elasticloadbalancing:ap-southeast-1:652961893649:loadbalancer/app/govtechalb/4c263a5dd02f4cc5]
aws_lb_listener.govtech_listnr_lb: Creating...
aws_lb_listener.govtech_listnr_lb: Creation complete after 0s [id=arn:aws:elasticloadbalancing:ap-southeast-1:652961893649:listener/app/govtechalb/4c263a5dd02f4cc5/81a5a72a64e7dd10]

Apply complete! Resources: 13 added, 0 changed, 0 destroyed.

chakram@Chakram MINGW64 ~/Desktop/kubernetes/GovTech_Test/Terraform-frontend-app-deploy
$
